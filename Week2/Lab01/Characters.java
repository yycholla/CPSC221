public abstract class Characters {
    private int hitPoints;
    private int armorClass;
    private String soapBox;
    private armorType armorType;
    private weaponType weaponType;
    private String cliche, className;
    // Boolean variables for the character's abilities. These are not set in the
    // constructor as Java sets them to false by default.
    private boolean hasManeuvers, tendsToRage, sneaksAround, willToSurvive, picksLock, castsSpell, healsOthers,
            solvesProblems;

    // Enum for the armor types
    public enum armorType {
        HEAVY, MEDIUM, LIGHT, NONE, NULL
    }

    // Enum for the weapon types
    public enum weaponType {
        MARTIAL, SIMPLE, STAFF, WORDS
    }

    // Constructor for the Characters class
    public Characters(int hitPoints, int armorClass) {
        this.hitPoints = hitPoints;
        this.armorClass = armorClass;
        this.className = "Frenchman";
        this.cliche = "";

        this.className = className();
        this.armorType = wearArmor();
        this.weaponType = useWeapon();
    }

    /**
     * Generates a cliche for the character based on their abilities
     *
     * The cliche is a string that is added to the end of the soapBox string. It is
     * generated based on the character's abilities. If the character has no
     * abilities, then the cliche references Monty Python and the Holy Grail.
     */
    private void generateCliche() {
        if (this.hasManeuvers) {
            this.cliche += "\nMy weapon training and combat prowess is unmatched.";
        }
        if (this.tendsToRage) {
            this.cliche += "\nWhen I angry I unstoppable.";
        }
        if (this.sneaksAround) {

            this.cliche += "\nI prefer to be unseen and avoid combat.";
        }
        if (this.picksLock) {
            this.cliche += "\nI can pick locks to get through doors.";
        }
        if (this.castsSpell) {
            this.cliche += "\nI have dedicated my life to learning magic";
        }
        if (this.healsOthers) {
            this.cliche += "\nMy healing keeps the party alive";
        }
        if (this.solvesProblems) {
            this.cliche += "\nMy intelligence moves the party through difficult situations";
        }
        if (!this.hasManeuvers && !this.tendsToRage && !this.sneaksAround && !this.picksLock && !this.castsSpell
                && !this.healsOthers && !this.solvesProblems) {
            this.cliche += "\nYour mother was a hamster and your father smelled of elderberries. Now go away before I taunt you a second time";
        }
    }

    /**
     * Generates the soapBox string for the character
     *
     * The soapBox is a string that describes the character. It is a combination of
     * the character's name, hit points, armor class, armor type, and a cliche.
     * The cliche is a string that is generated by the generateCliche method and
     * is based on the character's abilities.
     */
    private void generateSoapBox() {
        this.soapBox = "I am a " + this.className + ".\n" +
                "I have " + this.hitPoints + " HP and " + this.armorClass + " AC.\n" +
                "I wear " + this.armorType.name().toLowerCase() + " armor!\n" +
                "I wield " + this.weaponType.name().toLowerCase() + " weapons" +
                this.cliche + "\n\n";
    }

    /**
     * Updates the description of the character. This method should be called
     * whenever the character's abilities change. It updates the character's
     * cliche and soapBox strings. The cliche is a string that summarizes the
     * character's abilities. The soapBox is a string that describes the
     * character and is a combination of the character's name, hit points, armor
     * class, armor type, and cliche.
     */
    public void updateDescription() {
        generateCliche();
        generateSoapBox();
    }

    /**
     * Returns the name of the character.
     *
     * This method is abstract and must be implemented by the subclass.
     */
    public abstract String className();

    /**
     * Returns the weapon type of the character.
     *
     * This method is abstract and must be implemented by the subclass.
     */
    public abstract weaponType useWeapon();

    /**
     * Returns the armor type of the character.
     *
     * This method is abstract and must be implemented by the subclass.
     */

    public abstract armorType wearArmor();

    /**
     * Sets whether the character has maneuvers.
     *
     * If set is true, then the character is considered to have
     * maneuvers. If set is false, then the character is not
     * considered to have maneuvers.
     *
     * @param set Whether the character has maneuvers.
     */
    public void setHasManeuvers(boolean set) {
        this.hasManeuvers = set;
    }

    /**
     * Returns whether the character has maneuvers.
     *
     * @return true if the character has maneuvers, false otherwise
     */
    public boolean getHasManeuvers() {
        return this.hasManeuvers;
    }

    /**
     * Sets whether the character tends to rage.
     *
     * If set is true, then the character is considered to tend to rage.
     * If set is false, then the character is not considered to tend to rage.
     *
     * @param set Whether the character tends to rage.
     */
    public void setTendsToRage(boolean set) {
        this.tendsToRage = set;
    }

    /**
     * Returns whether the character tends to rage.
     *
     * @return true if the character tends to rage, false otherwise
     */
    public boolean getTendsToRage() {
        return this.tendsToRage;
    }

    /**
     * Sets whether the character tends to sneak around.
     *
     * If set is true, then the character is considered to tend to sneak
     * around. If set is false, then the character is not considered to
     * tend to sneak around.
     *
     * @param set Whether the character tends to sneak around.
     */
    public void setSneaksAround(boolean set) {
        this.sneaksAround = set;
    }

    /**
     * Returns whether the character tends to sneak around.
     *
     * @return true if the character tends to sneak around, false otherwise
     */
    public boolean getSneaksAround() {
        return this.sneaksAround;
    }

    /**
     * Sets whether the character will survive.
     *
     * If set is true, then the character is considered to have the will to
     * survive. If set is false, then the character is not considered to
     * have the will to survive.
     *
     * @param set Whether the character will survive.
     */
    public void setWillToSurvive(boolean set) {
        this.willToSurvive = set;
    }

    /**
     * Returns whether the character will survive.
     *
     * @return true if the character will survive, false otherwise
     */
    public boolean getWillToSurvive() {
        return this.willToSurvive;
    }

    /**
     * Sets whether the character can pick locks.
     *
     * If set is true, then the character is considered capable of picking locks.
     * If set is false, then the character is not considered capable of picking
     * locks.
     *
     * @param set Whether the character can pick locks.
     */

    public void setPicksLock(boolean set) {
        this.picksLock = set;
    }

    /**
     * Returns whether the character can pick locks.
     *
     * @return true if the character can pick locks, false otherwise
     */
    public boolean getPicksLock() {
        return this.picksLock;
    }

    /**
     * Sets whether the character casts spells.
     *
     * If set is true, then the character is considered capable of casting
     * spells. If set is false, then the character is not considered capable
     * of casting spells.
     *
     * @param set Whether the character casts spells.
     */
    public void setCastsSpell(boolean set) {
        this.castsSpell = set;
    }

    /**
     * Returns whether the character casts spells.
     *
     * @return true if the character casts spells, false otherwise
     */
    public boolean getCastsSpell() {
        return this.castsSpell;
    }

    /**
     * Sets whether the character heals others.
     *
     * If set is true, then the character is considered capable of healing others.
     * If set is false, then the character is not considered capable of healing
     * others.
     *
     * @param set Whether the character heals others.
     */

    public void setHealsOthers(boolean set) {
        this.healsOthers = set;
    }

    /**
     * Returns whether the character heals others.
     *
     * @return true if the character heals others, false otherwise
     */
    public boolean getHealsOthers() {
        return this.healsOthers;
    }

    /**
     * Sets whether the character solves problems.
     *
     * If set is true, then the character is considered capable of solving
     * problems. If set is false, then the character is not considered capable
     * of solving problems.
     *
     * @param set Whether the character solves problems.
     */
    public void setSolvesProblems(boolean set) {
        this.solvesProblems = set;
    }

    /**
     * Returns whether the character is capable of solving problems.
     *
     * @return true if the character solves problems, false otherwise
     */
    public boolean getSolvesProblems() {
        return this.solvesProblems;
    }

    /**
     * Returns a string representation of the character.
     *
     * The string representation of the character is a multi-line string that
     * describes the character. It includes the character's name, hit points,
     * armor class, armor type, and a cliche.
     *
     * @return a string representation of the character
     */
    public String toString() {
        return this.soapBox;
    }
}
